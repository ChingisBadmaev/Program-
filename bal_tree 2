#include <iostream>
#include <cmath>
using namespace std;
struct node{
  int data;
  node* left = NULL;
  node* right = NULL;
  int bal = 0;
};
class bal_tree{
    node* root;
    void del_tree(node* n){
     if(n == NULL)
      return;
     del_tree(n->left);
     del_tree(n->right);
     delete n;
    }
    void l_round(node* n){
     n->bal = 0;
     node* tmp = n->right;
     node* tmp1 = n->right->left;
     tmp->left = n;
     tmp->left->right = tmp1;
     tmp->bal++;
     if(n == root)
      root = tmp;
     else re_n(root, n, tmp);
    }
    void r_round(node* n){
     n->bal = 0;
     node* tmp = n->left;
     node* tmp1 = n->left->right;
     tmp->right = n;
     tmp->right->left = tmp1;
     tmp->bal--;
     if(n == root)
      root = tmp;
     else re_n(root, n, tmp);
    }
    void re_n(node* r, node* n, node* h){
     if(r->right == n){
      r->right = h;
      return;
     }
     if(r->left == n){
      r->left = h;
      return;
     }
     if(r->data < n->data)
      re_n(r->right, n, h);
     else re_n(r->left, n, h);
    }
    int l_r(node* n){
     if(n->bal > 0)
      return 1;
     if(n->bal < 0)
      return -1;
     return 0;
    }
    int max_g(node* n){
     if(n == NULL)
      return 0;
     if(max_g(n->left) > max_g(n->right))
      return 1 + max_g(n->left);
     else return 1 + max_g(n->right);
    }
   public:
    bal_tree(int a){
      root = new node;
      root -> data = a;
    }
    node* get(){
      return root;
    }
    void push(int a, node* n){
      if(n == NULL){
       node* tmp = new node;
       tmp->data = a;
       n = tmp;
       return;
      }
      if(a < n->data){
       if(n->left == NULL){
        node* tmp = new node;
        tmp->data = a;
        n->left = tmp;
        n->bal++;
        return;
       }
       int i = max_g(n->left);
       push(a, n->left);
       if(i != max_g(n->left))
        n->bal++;
       if(n->bal > 1){
        if(l_r(n->left) == -1)
         l_round(n->left);
        r_round(n);
       }
       return;
      }
      if(n->right == NULL){
       node* tmp = new node;
       tmp->data = a;
       n->right = tmp;
       n->bal--;
       return;
      }
      int i = max_g(n->right);
      push(a, n->right);
      if(i != max_g(n->right))
       n->bal--;
      if(n->bal < -1){
       if(l_r(n->right) == 1)
        r_round(n->right);
       l_round(n);
      }
      return;
    }
    int pop(){
     if(root == NULL){
      cout << "ошибка";
      return 0;
     }
     node* tmp = root;
     int a;
     if(tmp->left == NULL){
      if(tmp->right == NULL){
       a = tmp->data;
       delete tmp;
       root = NULL;
       return a;
      }
      a = tmp->data;
      tmp = tmp->right;
      delete root;
      root = tmp;
      return a;
     }
     while(tmp->left->left != NULL){
      tmp->bal--;
      tmp = tmp->left;
     }
     if(tmp->left->right != NULL){
      a = tmp->left->data;
      node* tmp1 = tmp->left->right;
      delete tmp->left;
      tmp->left = tmp1;
      tmp->bal--;
      return a;
     }
     a = tmp->left->data;
     delete tmp->left;
     tmp->left = NULL;
     tmp->bal--;
     return a;
    }
    void del_n(int a, node* n){
     if(a == n->data){
      node* tmp = n->left;
      re_n(root, n, n->right);
      while(tmp->left != NULL)
       tmp = tmp->left;
      tmp->left = n->left;
      delete n;
      balance_tree(root);
      return;
     }
     if(a > n->data)
      del_n(a, n->right);
     else del_n(a, n->left);
    }
    void balance_tree(node* n){
     if(n == NULL)
      return;
     if(abs(max_g(n->left->left) - max_g(n->left->right)) > 1)
      balance_tree(n->left);
     if(abs(max_g(n->right->left) - max_g(n->right->right)) > 1)
      balance_tree(n->right);
     if(max_g(n->left) - max_g(n->right) > 1){
      if(max_g(n->left->left) - max_g(n->left->right) < -1)
       l_round(n->left);
      r_round(n);
     }
     if(max_g(n->left) - max_g(n->right) < -1){
      if(max_g(n->right->left) - max_g(n->right->right) > 1)
       r_round(n->right);
      l_round(n);
     }
    }
    bool find(int a, node* n){
     if(n == NULL)
      return 0;
     if(n->data == a)
      return 1;
     if(n->data > a)
      return find(a, n->left);
     return find(a, n->right);
    }
    ~bal_tree(){
      del_tree(root);
    }
};
int main(){
 int a, b, c, d, e;
 cin >> a >> b >> c >> d >> e;
 bal_tree obj1(a);
 obj1.push(b, obj1.get());
 obj1.push(c, obj1.get());
 obj1.push(d, obj1.get());
 obj1.push(e, obj1.get());
 obj1.push(b+10, obj1.get());
 obj1.push(c+10, obj1.get());
 cout << obj1.find(b, obj1.get()) << endl;
 obj1.del_n(a, obj1.get());
 obj1.del_n(b, obj1.get());
 obj1.del_n(c, obj1.get());
 obj1.del_n(d, obj1.get());
 obj1.del_n(e, obj1.get());
 obj1.del_n(b+10, obj1.get());
 obj1.del_n(c+10, obj1.get());
 return 0;
}

#include <iostream>
#include <vector>

using namespace std;

class Fraction{
	int a;
	int b;
public:
	Fraction(int aa, int bb) : a(aa), b(bb) {}
	int &num() { return a; }
	int &den() { return b; }
};

template<class lhs, class rhs>
class Fraction_sum {
	lhs &l;
	rhs &r;
public:
	Fraction_sum(lhs &L, rhs &R) : l(L), r(R) {}
	const int &num() { return l.num()*r.den() + r.num()*l.den(); }
	const int &den() { return l.den()*r.den(); }
};

template<class lhs, class rhs>
class Fraction_multi {
	lhs &l;
	rhs &r;
public:
	Fraction_multi(lhs &L, rhs &R) : l(L), r(R) {}
	const int &num() { return l.num()*r.num(); }
	const int &den() { return l.den()*r.den(); }
};

template<class lhs, class rhs> 
Fraction_sum<lhs,rhs> operator+(lhs &L, rhs &R) { return Fraction_sum<lhs,rhs>(L, R); } 

template<class lhs, class rhs>
Fraction_multi<lhs, rhs> operator*(lhs &L, rhs &R) { return Fraction_multi<lhs, rhs>(L, R); }

int main() {

	system("pause");
	return 0;
}

#include <iostream>

using namespace std;

template<class T>
struct Node
{
	T d;
	Node<T> *n;
	Node(int dd = 0, Node<T> *nn = nullptr) : d(dd), n(nn) {}
};

template<class T>
Node<T> * create(int l) {
	Node<T> *p;
	Node<T> **t = &p;
	for (int i = 1; i <= 5; i++)
	{
		*t = new Node<T>(l*i, nullptr);
		t = &(*t)->n;
	}
	return p;
}

template<class T>
Node<T> * sliynie(Node<T> *&f, Node<T> *&g)
{
	Node<T> *p, **t = &p;
	while (f != nullptr || g != nullptr)
	{
		if (f == nullptr)
		{
			(*t) = g;
			return p;
		}
		if (g == nullptr) 
		{
			(*t) = f;
			return p;
		}
		if (f->d < g->d)
		{
			*t = f;
			f = f->n;
			(*t)->n = nullptr;
			t = &(*t)->n;
		}
		else
		{
			*t = g;
			g = g->n;
			(*t)->n = nullptr;
			t = &(*t)->n;
		}
	}
	return p;
}

template<class T>
void out(Node<T> *p)
{
	while (p != nullptr)
	{
		cout << p->d << endl;
		p = p->n;
	}
}

int main()
{
	Node<int> *AA = create<int>(3);
	Node<int> *BB = create<int>(5);
	Node<int> *CC = sliynie(AA, BB);
	out(CC);
	system("pause");
	return 0;
}

#include <iostream>

using namespace std;

template<class T>
struct BNode
{
	T data;
	BNode<T> *left;
	BNode<T> *right;
	BNode(T dd, BNode<T> *l = nullptr, BNode<T> *r = nullptr) :data(dd), left(l), right(r) {}
};

template<class T>
BNode<T> *samui_l(BNode<T> *r)
{
	if (r->left != nullptr) return samui_l(r->left);
	if (r->right != nullptr) return samui_l(r->right);
	return r;
}

template<class T>
BNode<T> *vtoroi_l(BNode<T> *r, BNode<T> *tmp = nullptr)
{
	if (r->left != nullptr && r->left != nullptr) tmp = r;
	if (r->left != nullptr) return vtoroi_l(r->left, tmp);
	if (r->right != nullptr) return vtoroi_l(r->right, tmp);
	return samui_l(tmp->right);
}

int main()
{
	BNode<int> *tree1 = new BNode<int>(1,
		new BNode<int>(2,
			new BNode<int>(4),
			new BNode<int>(5)),
		new BNode<int>(3,
			new BNode<int>(6)));
	BNode<int> *AA = vtoroi_l(tree1);
	cout << AA->data << endl;

	system("pause");
	return 0;
}

/*Написать класс для хранения последовательности элементов, в которой следующие операции выполняются за
время, пропорциональное логарифму от числа элементов в последовательности:
1) доступ к элементу по его номеру в последовательности;
2) вставка нового элемента в заданную номером позицию (при этом номера всех последующих элементов увеличива-
ются на 1, и информация в Вашей структуре данных должна храниться так, чтобы это не приводило к необходимости
полного обхода дерева);
3) удаление элемента из заданной номером позиции (при этом номера всех последующих элементов уменьшаются
на 1, аналогично см. замечание в п. 2).*/

#include <iostream>
#include <algorithm>
#include <map>

using namespace std;

struct AVLNode
{
	int key; //элемент
	int size;
	AVLNode* right;
	AVLNode* left;
	AVLNode* father;
	AVLNode(int k, int s = 0, AVLNode* f = nullptr, AVLNode* r = nullptr, AVLNode* l = nullptr) : key(k), size(s), father(f), right(r), left(l) {}
	void correct_h_uzel()
	{
		int n = -1, m = -1;
		if (right != nullptr) m = right->size;
		if (left != nullptr) n = left->size;
		size = max(m, n) + 1;
	}
	int defect_h()
	{
		int n = -1, m = -1;
		if (right != nullptr) m = right->size;
		if (left != nullptr) n = left->size;
		return m - n;
	}
	void print_uzel() { cout << key << " " << size << " " << this << endl; }
};

void print_1(AVLNode* r, int offset = 0);
AVLNode* find_1(int k, AVLNode* p);
void correct_h_1(AVLNode*& p);
void rotate_right_1(AVLNode*& p);
void rotate_left_1(AVLNode*& p);
void correctm2_1(AVLNode*& p);
void correct2_1(AVLNode*& p);
void rebalance_1(AVLNode*& p);
void insert_1(int key, AVLNode*& p);
void del_root_noleft_1(AVLNode*& p);
void del_root_noright_1(AVLNode*& p);
void del_uzel_noleft_1(AVLNode*& p);
void del_uzel_noright_1(AVLNode*& p);
void del_1(int key, AVLNode*& p);

void DELETE(AVLNode*& p);

struct AVLTree
{
	AVLNode* root;
	map<int, AVLNode*> A;

	AVLTree(AVLNode* r) : root(r) {}
	void print() { print_1(root); }
	AVLNode* find(int k) { return find_1(k, root); }
	AVLNode* find_n(int k) { return A[k]; } //задача 1, индексы в последовательности от 0
	void correct_h() { correct_h_1(root); }
	void correct_h(AVLNode* p) { correct_h_1(p); }
	void rotate_right(AVLNode*& p) { rotate_right_1(p); }
	void rotate_left(AVLNode*& p) { rotate_left_1(p); }
	void correctm2(AVLNode*& p) { correctm2_1(p); } 
	void correct2(AVLNode*& p) { correct2_1(p); } 
	void rebalance(AVLNode*& p) { rebalance_1(p); }
	void insert(int k, int m) //задача 2
	{
		if (root == nullptr)
		{
			root = new AVLNode(k);
			A[0] = root;
			return;
		}
		for (int i = A.size(); i > m; i--)
			A[i] = A[i - 1];
		insert_1(k, root);
		A[m] = find(k);
	}
	void del_root_noleft() { del_root_noleft_1(root); }
	void del_root_noright() { del_root_noright_1(root); }
	void del_uzel_noleft(AVLNode*& p) { del_uzel_noleft_1(p); }
	void del_uzel_noright(AVLNode*& p) { del_root_noright_1(p); }
	void del(int k) //задача 3
	{
		del_1(A[k]->key, root);
		for (int i = k; i < A.size() - 1; i++)
			A[i] = A[i + 1];
		A.erase(A.size() - 1);
	}

	~AVLTree() { DELETE(root); }
};

void print_1(AVLNode* r, int offset)
{
	if (r == nullptr) return;
	print_1(r->left, offset + 3);
	for (int i = 0; i < offset; i++) cout << " ";
	cout << r->key << endl;
	print_1(r->right, offset + 3);
}

AVLNode* find_1(int k, AVLNode* p)
{
	if (p == nullptr) return nullptr;
	if (k == p->key) return p;
	if (k > p->key) return find_1(k, p->left);
	return find_1(k, p->right);
}

void correct_h_1(AVLNode*& p)
{
	if (p == nullptr) return;
	correct_h_1(p->right);
	correct_h_1(p->left);
	int n = -1, m = -1;
	if (p->right != nullptr) m = p->right->size;
	if (p->left != nullptr) n = p->left->size;
	p->size = max(m, n) + 1;
}

void rotate_right_1(AVLNode*& p)
{
	if (p->right == nullptr || p == nullptr) return;
	AVLNode* tmp = p->father;
	AVLNode* tmp1 = p;
	AVLNode* tmp2 = p->right;
	AVLNode* tmp3 = p->right->left;
	p->right = tmp3;
	if (p->right != nullptr) p->right->father = p;
	if (p->father != nullptr)
	{
		if (p->father->left == p) p->father->left = tmp2;
		else p->father->right = tmp2;
		tmp2->father = p->father;
	}
	else tmp2->father = nullptr;
	tmp2->left = tmp1;
	tmp2->left->father = tmp2;
	tmp2->father = tmp;
}

void rotate_left_1(AVLNode*& p)
{
	if (p->left == nullptr || p == nullptr) return;
	AVLNode* tmp = p->father;
	AVLNode* tmp1 = p;
	AVLNode* tmp2 = p->left;
	AVLNode* tmp3 = p->left->right;
	p->left = tmp3;
	if (p->left != nullptr) p->left->father = p;
	if (p->father != nullptr)
	{
		if (p->father->left == p) p->father->left = tmp2;
		else p->father->right = tmp2;
		tmp2->father = p->father;
	}
	else tmp2->father = nullptr;
	tmp2->right = tmp1;
	tmp2->right->father = tmp2;
	tmp2->father = tmp;
}

void correctm2_1(AVLNode*& p)
{
	if (p->left->right == nullptr)
	{
		rotate_left_1(p);
		return;
	}
	if (p->left->left == nullptr)
	{
		rotate_right_1(p->left);
		rotate_left_1(p);
		return;
	}
	if (p->left->left->size < p->left->right->size)
	{
		rotate_right_1(p->left);
		rotate_left_1(p);
	}
	else rotate_left_1(p);
}

void correct2_1(AVLNode*& p)
{
	if (p->right->left == nullptr)
	{
		rotate_right_1(p);
		return;
	}
	if (p->right->right == nullptr)
	{
		rotate_left_1(p->right);
		rotate_right_1(p);
		return;
	}
	if (p->right->right->size < p->right->left->size)
	{
		rotate_left_1(p->right);
		rotate_right_1(p);
	}
	else rotate_right_1(p);
}

void rebalance_1(AVLNode*& p)
{
	if (p == nullptr) return;
	rebalance_1(p->left);
	rebalance_1(p->right);
	if (p->defect_h() >= 2) correct2_1(p);
	if (p->defect_h() <= -2) correctm2_1(p);
	correct_h_1(p);
	if (p->father != nullptr) p->father->correct_h_uzel();
}

void insert_1(int key, AVLNode*& p)
{
	if (p->key == key) return;
	if (p->key > key)
		if (p->right == nullptr) p->right = new AVLNode(key, 0, p->right);
		else insert_1(key, p->right);
	else
		if (p->left == nullptr) p->left = new AVLNode(key, 0, p->left);
		else insert_1(key, p->left);
	rebalance_1(p);
}

void del_root_noleft_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->right == nullptr)
	{
		AVLNode* tmp = p;
		p = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->right;
	tmp1->father = nullptr;
	p->right = nullptr;
	p = tmp1;
	delete tmp;
	correct_h_1(p);
	rebalance_1(p);
}

void del_root_noright_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->left == nullptr)
	{
		AVLNode* tmp = p;
		p = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->left;
	tmp1->father = nullptr;
	p->left = nullptr;
	p = tmp1;
	delete tmp;
	correct_h_1(p);
	rebalance_1(p);
}

void del_uzel_noleft_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->father == nullptr)
	{
		del_root_noleft_1(p);
		return;
	}
	if (p->right == nullptr)
	{
		AVLNode* tmp = p;
		p->father = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->right;
	p->right = nullptr;
	tmp1->father = tmp->father;
	if (p->father->left == p) p->father->left = tmp1;
	else p->father->right = tmp1;
	delete tmp;
	AVLNode* tmp11 = p;
	while (tmp11->father != nullptr) tmp11 = tmp11->father;
	rebalance_1(tmp11);
}

void del_uzel_noright_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->father == nullptr)
	{
		del_root_noright_1(p);
		return;
	}
	if (p->left == nullptr)
	{
		AVLNode* tmp = p;
		if (p->father->left == p) p->father->left = nullptr;
		else p->father->right = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->left;
	p->left = nullptr;
	tmp1->father = tmp->father;
	if (p->father->left == p) p->father->left = tmp1;
	else p->father->right = tmp1;
	delete tmp;
	AVLNode* tmp11 = p;
	while (tmp11->father != nullptr) tmp11 = tmp11->father;
	rebalance_1(tmp11);
}

void del_2(int key, AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->key == key)
	{
		if (p->right == nullptr)
		{
			del_uzel_noright_1(p);
			return;
		}
		if (p->left == nullptr)
		{
			del_uzel_noleft_1(p);
			return;
		}
		p->key = p->left->key;
		del_2(p->key, p->left);
		return;
	}
	if (p->key > key) del_2(key, p->right);
	else del_2(key, p->left);
}

void del_1(int k, AVLNode*& p)
{
	del_2(k, p);
	rebalance_1(p);
}

void DELETE(AVLNode*& p)
{
	if (p->left != nullptr)
	{
		DELETE(p->left);
		p->left = nullptr;
	}
	if (p->right != nullptr)
	{
		DELETE(p->right);
		p->right = nullptr;
	}
	delete p;
}

int main()
{
	AVLTree* tree = new AVLTree(nullptr);
	tree->insert(5, 0);
	tree->insert(3, 1);
	tree->insert(7, 2);
	tree->insert(2, 3);
	tree->insert(11, 4);
	tree->insert(4, 5);

	tree->del(3);
	tree->print();
	cout << endl << endl;

	for (int i = 0; i < tree->A.size(); i++)
		cout << tree->A[i]->key << " ";

	return 0;
}

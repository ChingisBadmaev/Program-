/*Написать класс для хранения последовательности элементов, в которой следующие операции выполняются за
время, пропорциональное логарифму от числа элементов в последовательности:
1) доступ к элементу по его номеру в последовательности;
2) вставка нового элемента в заданную номером позицию (при этом номера всех последующих элементов увеличива-
ются на 1, и информация в Вашей структуре данных должна храниться так, чтобы это не приводило к необходимости
полного обхода дерева);
3) удаление элемента из заданной номером позиции (при этом номера всех последующих элементов уменьшаются
на 1, аналогично см. замечание в п. 2).*/

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

struct AVLNode
{
	int key;
	int data;
	int height;
	int kol_pot;
	AVLNode* right;
	AVLNode* left;
	AVLNode* father;
	AVLNode(int k, int d, int h = 0, AVLNode * f = nullptr, AVLNode * r = nullptr, AVLNode * l = nullptr, int kp = 1) :
		key(k), data(d), height(h), father(f), right(r), left(l), kol_pot(kp) {}
	void correct_h_uzel()
	{
		int n = -1, m = -1;
		if (right != nullptr) m = right->height;
		if (left != nullptr) n = left->height;
		height = max(m, n) + 1;
	}
	void correct_pot_uzel()
	{
		int n = 0, m = 0;
		if (right != nullptr) m = right->kol_pot;
		if (left != nullptr) n = left->kol_pot;
		kol_pot = n + m + 1;
	}
	int defect_h()
	{
		int n = -1, m = -1;
		if (right != nullptr) m = right->height;
		if (left != nullptr) n = left->height;
		return m - n;
	}
	void print_uzel() { cout << key << " " << data << " " << height << " " << this << endl; }
};

void print_1(AVLNode* r, int offset = 0);
AVLNode* find_1(int k, AVLNode* p);
void correct_h_1(AVLNode*& p);
int correct_pot_1(AVLNode*& p);
void rotate_right_1(AVLNode*& p);
void rotate_left_1(AVLNode*& p);
void correctm2_1(AVLNode*& p);
void correct2_1(AVLNode*& p);
void rebalance_1(AVLNode*& p);
void insert_1(int key, int data, AVLNode*& p);
void del_root_noleft_1(AVLNode*& p);
void del_root_noright_1(AVLNode*& p);
void del_uzel_noleft_1(AVLNode*& p);
void del_uzel_noright_1(AVLNode*& p);
void del_1(int key, AVLNode*& p);

AVLNode* find_n_1(int n, AVLNode* p);
void insert_n_1(int n, int k, AVLNode*& p);
void del_n_1(int n, AVLNode*& p);

void DELETE(AVLNode*& p);

struct AVLTree
{
	AVLNode* root;

	AVLTree(AVLNode* r) : root(r) {}
	void print() { print_1(root); }
	AVLNode* find(int k) { return find_1(k, root); }
	void correct_h(AVLNode* p) { correct_h_1(p); }
	void rotate_right(AVLNode*& p) { rotate_right_1(p); }
	void rotate_left(AVLNode*& p) { rotate_left_1(p); }
	void correctm2(AVLNode*& p) { correctm2_1(p); }
	void correct2(AVLNode*& p) { correct2_1(p); }
	void rebalance(AVLNode*& p) { rebalance_1(p); }
	void insert(int k, int d)
	{
		if (root == nullptr)
		{
			root = new AVLNode(k, d);
			return;
		}
		insert_1(k, d, root);
	}
	void del_root_noleft() { del_root_noleft_1(root); }
	void del_root_noright() { del_root_noright_1(root); }
	void del_uzel_noleft(AVLNode*& p) { del_uzel_noleft_1(p); }
	void del_uzel_noright(AVLNode*& p) { del_root_noright_1(p); }
	void del(int k) { del_1(k, root); }

	AVLNode* find_n(int n) { return find_n_1(n, root); }
	void insert_n(int n, int k)
	{
		if (root == nullptr)
		{
			root = new AVLNode(k, k);
			return;
		}
		insert_n_1(n, k, root);
	}
	void del_n(int n) { del_n_1(n, root); }

	~AVLTree() { DELETE(root); }
};

void print_1(AVLNode* r, int offset)
{
	if (r == nullptr) return;
	print_1(r->left, offset + 6);
	for (int i = 0; i < offset; i++) cout << " ";
	cout << r->key << " " << r->kol_pot << endl;
	print_1(r->right, offset + 6);
}

AVLNode* find_1(int k, AVLNode* p)
{
	if (p == nullptr) return nullptr;
	if (k == p->key) return p;
	if (k > p->key) return find_1(k, p->left);
	return find_1(k, p->right);
}

void correct_h_1(AVLNode*& p)
{
	if (p == nullptr) return;
	correct_h_1(p->right);
	correct_h_1(p->left);
	int n = -1, m = -1;
	if (p->right != nullptr) m = p->right->height;
	if (p->left != nullptr) n = p->left->height;
	p->height = max(m, n) + 1;
}

int correct_pot_1(AVLNode*& p)
{
	if (p == nullptr) return 0;
	p->kol_pot = correct_pot_1(p->left) + correct_pot_1(p->right) + 1;
	return p->kol_pot;
}

void rotate_right_1(AVLNode*& p)
{
	if (p->right == nullptr || p == nullptr) return;
	AVLNode* tmp = p->father;
	AVLNode* tmp1 = p;
	AVLNode* tmp2 = p->right;
	AVLNode* tmp3 = p->right->left;
	p->right = tmp3;
	if (p->right != nullptr) p->right->father = p;
	if (p->father != nullptr)
	{
		if (p->father->left == p) p->father->left = tmp2;
		else p->father->right = tmp2;
		tmp2->father = p->father;
	}
	else tmp2->father = nullptr;
	tmp2->left = tmp1;
	tmp2->left->father = tmp2;
	tmp2->father = tmp;
	p = tmp2;
	p->left->correct_h_uzel();
	p->correct_h_uzel();
	if (p->father != nullptr)p->father->correct_h_uzel();
	p->left->correct_pot_uzel();
	p->correct_pot_uzel();
	if (p->father != nullptr)p->father->correct_pot_uzel();
}

void rotate_left_1(AVLNode*& p)
{
	if (p->left == nullptr || p == nullptr) return;
	AVLNode* tmp = p->father;
	AVLNode* tmp1 = p;
	AVLNode* tmp2 = p->left;
	AVLNode* tmp3 = p->left->right;
	p->left = tmp3;
	if (p->left != nullptr) p->left->father = p;
	if (p->father != nullptr)
	{
		if (p->father->left == p) p->father->left = tmp2;
		else p->father->right = tmp2;
		tmp2->father = p->father;
	}
	else tmp2->father = nullptr;
	tmp2->right = tmp1;
	tmp2->right->father = tmp2;
	tmp2->father = tmp;
	p = tmp2;
	p->right->correct_h_uzel();
	p->correct_h_uzel();
	if (p->father != nullptr)p->father->correct_h_uzel();
	p->right->correct_pot_uzel();
	p->correct_pot_uzel();
	if (p->father != nullptr)p->father->correct_pot_uzel();
}

void correctm2_1(AVLNode*& p)
{
	if (p->left->right == nullptr)
	{
		rotate_left_1(p);
		return;
	}
	if (p->left->left == nullptr)
	{
		rotate_right_1(p->left);
		rotate_left_1(p);
		return;
	}
	if (p->left->left->height < p->left->right->height)
	{
		rotate_right_1(p->left);
		rotate_left_1(p);
	}
	else rotate_left_1(p);
}

void correct2_1(AVLNode*& p)
{
	if (p->right->left == nullptr)
	{
		rotate_right_1(p);
		return;
	}
	if (p->right->right == nullptr)
	{
		rotate_left_1(p->right);
		rotate_right_1(p);
		return;
	}
	if (p->right->right->height < p->right->left->height)
	{
		rotate_left_1(p->right);
		rotate_right_1(p);
	}
	else rotate_right_1(p);
}

void rebalance_1(AVLNode*& p)
{
	if (p == nullptr) return;
	rebalance_1(p->left);
	rebalance_1(p->right);
	if (p->defect_h() >= 2) correct2_1(p);
	if (p->defect_h() <= -2) correctm2_1(p);
}

void rebalance_uzel_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->defect_h() >= 2) correct2_1(p);
	if (p->defect_h() <= -2) correctm2_1(p);
}

void insert_1(int key, int data, AVLNode*& p)
{
	if (p->key == key) return;
	if (p->key > key)
		if (p->right == nullptr) p->right = new AVLNode(key, data, 0, p);
		else insert_1(key, data, p->right);
	else
		if (p->left == nullptr) p->left = new AVLNode(key, data, 0, p);
		else insert_1(key, data, p->left);
	p->correct_h_uzel();
	p->correct_pot_uzel();
	rebalance_uzel_1(p);
}

void del_root_noleft_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->right == nullptr)
	{
		AVLNode* tmp = p;
		p = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->right;
	tmp1->father = nullptr;
	p->right = nullptr;
	p = tmp1;
	delete tmp;
}

void del_root_noright_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->left == nullptr)
	{
		AVLNode* tmp = p;
		p = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->left;
	tmp1->father = nullptr;
	p->left = nullptr;
	p = tmp1;
	delete tmp;
}

void del_uzel_noleft_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->father == nullptr)
	{
		del_root_noleft_1(p);
		return;
	}
	if (p->right == nullptr)
	{
		AVLNode* tmp = p;
		p->father = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->right;
	p->right = nullptr;
	tmp1->father = tmp->father;
	if (p->father->left == p) p->father->left = tmp1;
	else p->father->right = tmp1;
	delete tmp;
}

void del_uzel_noright_1(AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->father == nullptr)
	{
		del_root_noright_1(p);
		return;
	}
	if (p->left == nullptr)
	{
		AVLNode* tmp = p;
		if (p->father->left == p) p->father->left = nullptr;
		else p->father->right = nullptr;
		delete tmp;
		return;
	}
	AVLNode* tmp = p;
	AVLNode* tmp1 = p->left;
	p->left = nullptr;
	tmp1->father = tmp->father;
	if (p->father->left == p) p->father->left = tmp1;
	else p->father->right = tmp1;
	delete tmp;
}

void del_1(int key, AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->key == key)
	{
		if (p->right == nullptr)
		{
			del_uzel_noright_1(p);
			return;
		}
		if (p->left == nullptr)
		{
			del_uzel_noleft_1(p);
			return;
		}
		p->key = p->left->key;
		p->data = p->left->data;
		del_1(p->key, p->left);
	}
	else
		if (p->key > key) del_1(key, p->right);
		else del_1(key, p->left);
	if (p == nullptr) return;
	p->correct_h_uzel();
	p->correct_pot_uzel();
	rebalance_uzel_1(p);
}

AVLNode* find_n_1(int n, AVLNode* p)
{
	if (p == nullptr) return nullptr;
	if (p->right != nullptr)
	{
		if (n - p->right->kol_pot == 1) return p;
		if (n - p->right->kol_pot > 1) return find_n_1(n - p->right->kol_pot - 1, p->left);
		return find_n_1(n, p->right);
	}
	if (n == 1) return p;
	return find_n_1(n - 1, p->left);
}

void insert_n_1(int n, int k, AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->right != nullptr)
	{
		if (n - p->right->kol_pot == 1)
		{
			AVLNode* tmp = new AVLNode(k, k, p->right->height + 1, nullptr, nullptr, nullptr, p->right->kol_pot + 1);
			p->right->father = tmp;
			tmp->right = p->right;
			p->right = tmp;
			tmp->father = p;
		}
		else
			if (n - p->right->kol_pot > 1)
				if (p->left != nullptr) insert_n_1(n - p->right->kol_pot - 1, k, p->left);
				else p->left = new AVLNode(k, k, 0, p);
			else insert_n_1(n, k, p->right);
	}
	else
		if (n == 1)	p->right = new AVLNode(k, k, 0, p);
		else
			if (p->left != nullptr) insert_n_1(n - 1, k, p->left);
			else p->left = new AVLNode(k, k, 0, p);
	p->correct_h_uzel();
	p->correct_pot_uzel();
	rebalance_uzel_1(p);
}

void del_n_1(int n, AVLNode*& p)
{
	if (p == nullptr) return;
	if (p->right != nullptr)
	{
		if (n - p->right->kol_pot == 1) del_1(p->key, p);
		else
			if (n - p->right->kol_pot > 1) del_n_1(n - p->right->kol_pot - 1, p->left);
			else del_n_1(n, p->right);
	}
	else
		if (n == 1) del_1(p->key, p);
		else del_n_1(n - 1, p->left);
	if (p == nullptr) return;
	p->correct_h_uzel();
	p->correct_pot_uzel();
	rebalance_uzel_1(p);
}

void DELETE(AVLNode*& p)
{
	if (p->left != nullptr)
	{
		DELETE(p->left);
		p->left = nullptr;
	}
	if (p->right != nullptr)
	{
		DELETE(p->right);
		p->right = nullptr;
	}
	delete p;
}

int main() {
	AVLTree S(nullptr);
	S.insert_n(1, -1);
	vector<int> V(1, -1);
	for (int i = 0; i < 10000; ++i)
	{
		int k = rand() % V.size();
		int d = rand();
		S.insert_n(k + 1, d);
		V.insert(k + V.begin(), d);
	}
	for (int i = 0; i < 10001; ++i)
	{
		if (V[i] != S.find_n(i+1)->data)
		{
			cout << "Error! find" << endl;
		}
	}
	return 0;
}

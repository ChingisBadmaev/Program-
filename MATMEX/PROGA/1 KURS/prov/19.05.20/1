#include <iostream>
#include <cstdlib>
#include <omp.h> 

using namespace std;

const int N = 1000000;
double A[N][2];

void f(double A[N][2])
{
	double a = 0, a1 = 0, b = sqrt(3) / 2;

#pragma omp parallel sections 
	{
#pragma omp section
		{
			for (int i = 0; i < N / 2; i++)
			{
				a = A[i][0] / 2 + A[i][1] * b;
				A[i][1] = -A[i][0] * b + A[i][1] / 2;
				A[i][0] = a;
			}
		}
#pragma omp section
		{
			for (int i = N / 2; i < N; i++)
			{
				a1 = A[i][0] / 2 + A[i][1] * b;
				A[i][1] = -A[i][0] * b + A[i][1] / 2;
				A[i][0] = a1;
			}
		}
	}
}

int main()
{
	for (int i = 0; i < N; i++)
	{
		A[i][0] = i;
		A[i][1] = i * 2;
	}

	f(A);

	for (int i = 0; i < N; i++)
		cout << A[i][0] << " " << A[i][1] << endl;

	return EXIT_SUCCESS;
}

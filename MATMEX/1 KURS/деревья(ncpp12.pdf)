#include <iostream>

using namespace std;

//структура узла  двоичного дерева
template<class T>
struct BNode
{
	T data;
	BNode<T> *left;
	BNode<T> *right;
	BNode(T dd, BNode<T> *l = nullptr, BNode<T> *r = nullptr) :data(dd), left(l), right(r) {}
};

//печать двоичного дерева
template<class T>
void print2(BNode<T> *r, int offset = 0)
{
	if (r == nullptr) return;
	print2(r->right, offset + 3);
	for (int i = 0; i<offset; i++)
		cout << ’ ’;
	cout << r->data << endl;
	print2(r->left, offset + 3);
}

//узел дерева с произвольным числом потомков
template<class T>
struct ANode
{
	T data;
	ANode<T> *down; //указатель на левого сына
	ANode<T> *right; //указатель на брата справа
	ANode(T dd, ANode<T> *d = nullptr, ANode<T> *r = nullptr) :
		data(dd), down(d), right(r) {}
};

//печать дерева с произвольным числом потомков
template<class T>
void printn(ANode<T> *r, int offset = 0)
{
	if (r == nullptr) return;
	for (int i = 0; i<offset; i++)
		cout << ’ ’;
	cout << r->data << endl;
	printn(r->down, offset + 3);
	printn(r->right, offset);
}

int main()
{
	//создание дерева (4<-2->5)<-1->(6<-3)
	BNode<int> *tree1 = new BNode<int>(1,
		new BNode<int>(2,
			new BNode<int>(4),
			new BNode<int>(5)),
		new BNode<int>(3,
			new BNode<int>(6)));
	print2(tree1);

	//создание дерева с произвольным числом потомков
	ANode<int> *tree2 = new ANode<int>(1,
		new ANode<int>(2,
			new ANode<int>(5,
				nullptr,
				new ANode<int>(6,
					nullptr,
					new ANode<int>(7))),
			new ANode<int>(3,
				new ANode<int>(8),
				new ANode<int>(4,
					new ANode<int>(9,
						nullptr,
						new ANode<int>(10))))));
	printn(tree2);

	system("pause");
	return 0;
}

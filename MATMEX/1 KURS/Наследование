#include <iostream>
#include <clocale>
#include <typeinfo>
using namespace std;

struct reg_znak {
	int a;
	reg_znak(int aa) :a(aa) {}
};

struct Car { //базовый класс
	double x, y, dir;
	Car(double xx, double yy, double d) :x(xx), y(yy), dir(d) {}
	void move(double len) {
		x += len*cos(dir);
		y += len*sin(dir);
	}
	void setDir(double nd) { dir = nd; }
};

struct Bus : public Car, protected reg_znak { //производный класс, режим доступа к базовом классам
											  //по умолчанию берется более строгий режим доступа (public Car при class Сar - будет private)
											  //protected - доступ к полям и методом базового только из методов производного
	int people;
	double money;
	Bus(double xx, double yy, double d, int aa) :Car(xx, yy, d), reg_znak(aa), people(0), money(0) {} //использование функции от Car
	void move(double len) {
		Car::move(len); //использование функции от Car
		money += people*len;
	}
	void enter(int n) {
		if (n >= 0)
			people += n;
	}
	void exit(int n) {
		if (n >= 0)
			if (n >= people)
				people = 0;
			else
				people -= n;
	}
};

struct Employee { //полиморфическая структура
	virtual ~Employee() {} //виртуальные функции, работают как указатели 
	virtual double salary() = 0;
};

struct Manager : Employee {
	double salary() { return 13000; }
};

struct Agent : virtual Employee { //приписка virtual, чтобы при последующем наследовании был один Employee, а не 2
	double amount;
	Agent(double a = 0) : amount(a) {}
	double salary() { return 5000 + 0.05*amount; }
};
struct Worker : virtual Employee { 
	double time;
	Worker(double t = 0) : time(t) {}
	double salary() { return 100 * time; }
};

struct Man : Worker, Agent { //наследник двух производых классов
	double k;
	Man(double a) : k(a) {}
	double salary() { return Agent::salary(); }
};


int main() {
	setlocale(LC_ALL, "Russian");
	Employee *M[3];
	M[0] = new Manager;
	M[1] = new Agent(120000);
	M[2] = new Worker(160);
	Manager *p = (Manager *)M[0]; //через p можно обратиться к уникальным полям и методам Agent, через M[1] - нельзя
	cout << typeid(*p).name() << endl; //требуется #include <typeinfo>
	cout << typeid(*M[0]).name() << endl; //требуется Agent *p = (Agent *)M[1];
	cout << typeid(M[0]).name() << endl; //не требуется
	cout << typeid(M[2]).name() << endl;
	for (int i = 0; i < 3; i++) {
		cout << "Зарплата " << i + 1 << "-го сотрудника составляет " << M[i]->salary() << " р." << endl;
		delete M[i]; //проявление полиморфизма: одно и то же выражение для разных структур(в удалении и выводе)
	}
	system("pause");
	return 0;
}

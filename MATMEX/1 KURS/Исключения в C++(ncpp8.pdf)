#include <iostream>
using namespace std;

//решение в лоб
enum Error { OK, LN, SQRT };

Error errcode;

double f(double x){
	if (x <= 0) { errcode = LN; return 0; }
	if (x>exp(10)) { errcode = SQRT; return 0; }
	errcode = OK;
	return sqrt(10 - log(x));
}

int main(){
	double x, y;
	cin >> x;
	y = f(x);
	switch (errcode){
	case OK:
		cout << "Result=" << y << endl;
		return EXIT_SUCCESS;
	case LN:
		cerr << "Logarithm undefined." << endl;
		return EXIT_FAILURE;
	case SQRT:
		cerr << "Square root undefined." << endl;
		return EXIT_FAILURE;
	default:
		cerr << "Internal error." << endl;
		return EXIT_FAILURE;
	}
}

//решение через C - строки(самое короткое)
double f(double x)
{
	if (x <= 0) throw "Logarithm undefined."; //возвращается const char *
	if (x > exp(10)) throw "Square root undefined."; //возвращается const char *
	return sqrt(10 - log(x));
}

int main()
{
	double x, y;
	cin >> x;
	try { y = f(x); }
	catch (const char *msg) //условие работы catch - совпадение класса, возвращаемого throw
	{ 
		cerr << msg << endl;
		return EXIT_FAILURE;
	}
	cout << "Result=" << y << endl;
	return EXIT_SUCCESS;
}

//классы без полей (самое адаптирующиеся решение)
class LnException {};
class SqrtException {};
double f(double x)
{
	if (x <= 0) throw LnException(); //возвращается LnException
	if (x > exp(10)) throw SqrtException(); //возвращается SqrtException
	return sqrt(10 - log(x));
}

int main()
{
	double x, y;
	cin >> x;
	try { y = f(x); }
	catch (LnException)
	{
		cerr << "Logarithm undefined." << endl;
		return EXIT_FAILURE;
	}
	catch (SqrtException)
	{
		cerr << "Square root undefined." << endl;
		return EXIT_FAILURE;
	}
	cout << "Result=" << y << endl;
	return EXIT_SUCCESS;
}

//повтор после ошибки
double f(double x)
{
	if (x <= 0) throw "Logarithm undefined.";
	if (x>exp(10) throw "Square root undefined.";
	return sqrt(10 - log(x));
}
int main()
{
	double x, y;
	cin >> x;
	while (true)
		try { y = f(x); break; }
	catch (char *msg)
	{
		cerr << msg << endl;
		cout << "Введите новое значение параметра:";
		cin >> x;
	}
	cout << "Result=" << y << endl;
	return EXIT_SUCCESS;
}

//БЕЗОПАСНОСТЬ ИСКЛЮЧЕНИЙ		

#include <memory> //для unique_ptr

//замена для указателей(есть деструктор, не может быть скопирован или перемещен)
unique_ptr <int> a;

//указатель на массив
unique_ptr <int[]> A;

class SqrtException {};

//функция может использовать только те исключения, которые есть в списке
void f() throw(SqrtException) {}
//если функция использует не разрешенное исключение, программа завершается

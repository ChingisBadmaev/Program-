#include <iostream>
#include <string>
#include <list>
#include <sstream>

using namespace std;

struct Item
{
	virtual bool operator<(const Item&) const = 0;
	//virtual bool operator<(const Integer&) const = 0;
	//virtual bool operator<(const Real&) const = 0;
	virtual Item* read(istringstream& st) {}
	virtual string type() {}
	virtual ostringstream write() {}
	virtual ~Item() {}
};

struct Integer : Item
{
	int data;
	Integer(int n) : data(n) {}
	virtual bool operator<(const Item& x) const { return * this < x; }
	Item* read(istringstream& st)
	{
		int n;
		st >> n;
		return new Integer(n);
	}
	string type() { return "INTEGER"; }
	ostringstream write()
	{
		ostringstream st;
		st << data;
	}
};

struct Real : Item
{
	double data;
	Real(double a) : data(a) {}
	virtual bool operator<(const Item& x) const { return *this < x; }
	Item* read(istringstream& st)
	{
		double a;
		st >> a;
		return new Real(a);
	}
	string type() { return "REAL"; }
	ostringstream write()
	{
		ostringstream st;
		st << data;
	}
};

struct String : Item
{
	string data;
	String(string a) : data(a) {}
	virtual bool operator<(const Item& x) const { return *this < x; }
	Item* read(istringstream& st)
	{
		char c = st.get();
		string b;
		while (c != '"') {
			b += c;
			c = st.get();
		}
		return new String(b);
	}
	string type() { return "STRING"; }
	ostringstream write()
	{
		ostringstream st;
		st << data;
	}
};

struct List : Item
{
	list<Item*> data;
	List(list<Item*> a) : data(a) {}
	virtual bool operator<(const Item& x) const { return *this < x; }
	Item* read(istringstream& st)
	{
		list<Item*> B;
		char c = st.get(), k;
		while (c != char(-1))
		{
			if (c == ']') return new List(B);
			if (c == ',') st >> c;
			if (c != '"' && c != '[')
			{
				int p = c - '0';
				k = st.get();
				while (k != ' ')
				{
					p *= 10;
					p += k - '0';
					k = st.get();
				}
				B.push_back(new Integer(p));
				st >> c;
				continue;
			}
			if (c == '"')
			{
				string b;
				k = st.get();
				while (k != '"')
				{
					b += k;
					k = st.get();
				}
				B.push_back(new String(b));
				st >> c;
				continue;
			}
			if (c == '[') {
				B.push_back(read(st));
				st >> c;
				continue;
			}
		}
		return new List(B);
	}
	string type() { return "LIST"; }
	/*ostringstream write()
	{
		ostringstream st;
		if(type() == )
		st << data;
	}*/

	~List() { while (!empty(data)) data.pop_back(); }
};

//bool f(list<Item*> a, list<Item*> b) { return 1; }

struct WSEML
{
	Item* data;
	//конструкторы
	WSEML() : data(nullptr) {}
	WSEML(Item* d) : data(d) {}
	WSEML(const WSEML& P)
	{
		//data = new Item;
		*data = *P.data;
	}
	WSEML(WSEML&& P) : data(P.data)
	{
		P.data = nullptr;
	}
	//операции сравнения
	const bool operator<(const WSEML& P) { return *this < P; }
	//деструктор
	~WSEML() { data->~Item(); }
};

int main()
{
	string str1 = "[1]";
	string str = "[3,5.2,[2]]";
	istringstream st(str1);
	/*Item* A;
	A = A->read(st);*/

	return 0;
}

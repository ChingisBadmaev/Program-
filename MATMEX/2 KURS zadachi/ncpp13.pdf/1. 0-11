#include <iostream>

#include <fstream>
#include <string>

using namespace std;

int digit(int x, int n)
{
	int a = (x >> n);
	return a & 1;
}

template<class T>
struct DSNode
{
	int key;
	T data;
	DSNode<T>* Zero;
	DSNode<T>* One;
	DSNode(int k, T d, DSNode<T>* z = nullptr, DSNode<T>* o = nullptr) : key(k), data(d), Zero(z), One(o) {}
};

template<class T>
struct DSTree
{
	DSNode<T>* root;

	DSTree(DSNode<T>* r) : root(r) {}
	void print() { print_1(root); }
	DSNode<T>* search(int k) { return search_1(k, root); }
	void insert(int k, T data) { if (search(k) == nullptr) insert_1(k, data, root); }
	void del(int k)
	{
		if (root->key == k)
		{
			DSNode<T>* tmp = root;
			root = nullptr;
			delete tmp;
		}
		else
			if (digit(k, 0) == 0) del1(k, root->Zero, 0, root);
			else del_1(k, root->One, 1, root);
	}
	void searchMask1(int mask) { searchMask1_1(mask, root); }
	void searchMask2(int mask, int k) { searchMask2_1(mask, k, root); }
	void replace() { replace_1(root); }

	~DSTree() { DELETE(root); }
};

template<class T>
void print_1(DSNode<T>* r, int offset = 0)
{
	if (r == nullptr) return;
	print_1(r->Zero, offset + 3);
	for (int i = 0; i < offset; i++) cout << " ";
	cout << r->key << " " << r->data << endl;
	print_1(r->One, offset + 3);
}

template<class T>
DSNode<T>* search_1(int k, DSNode<T>* p, int i = 0)
{
	if (p == nullptr) return nullptr;
	if (k == p->key) return p;
	if (digit(k, i) == 0) return search_1(k, p->Zero, i + 1);
	else return search_1(k, p->One, i + 1);
}

template<class T>
void insert_1(int k, T data, DSNode<T>*& p, int i = 0)
{
	if (p->key == k) return;
	if (digit(k, i) == 0)
		if (p->Zero != nullptr) insert_1(k, data, p->Zero, i + 1);
		else p->Zero = new DSNode<T>(k, data);
	else
		if (p->One != nullptr) insert_1(k, data, p->One, i + 1);
		else p->One = new DSNode<T>(k, data);
}

template<class T>
DSNode<T>* del_2(DSNode<T>*& p, DSNode<T>*& pp, int a)
{
	if (p->Zero == nullptr && p->One == nullptr)
	{
		if (a == 0) pp->Zero = nullptr;
		else pp->One = nullptr;
		return p;
	}
	if (p->Zero != nullptr) return del_2(p->Zero, p, 0);
	else return del_2(p->One, p, 1);
}

template<class T>
void del_1(int k, DSNode<T>*& p, DSNode<T>*& pp, int a, int i = 1)
{
	if (p == nullptr) return;
	if (k == p->key)
		if (p->Zero != nullptr && p->One != nullptr)
		{
			DSNode<T>* tmp = del_2(p, pp);
			tmp->One = p->One;
			tmp->Zero = p->Zero;
			if (a == 0) pp->Zero = tmp;
			else pp->One = tmp;
			delete p;
			return;
		}
		else
		{
			if (a == 0) pp->Zero = nullptr;
			else pp->One = nullptr;
			delete p;
			return;
		}
	if (digit(k, i) == 0) del_1(k, p->Zero, 0, p, i + 1);
	else del_1(k, p->One, 1, p, i + 1);
}

template<class T>
void searchMask1_1(int mask, DSNode<T>* p, int i = 0)
{
	if (p->key & mask == mask) cout << p->key << " " << p->data << endl;
	searchMask1_1(mask, p->One, i + 1);
	if (digit(mask, i) == 0) searchMask1_1(mask, p->Zero, i + 1);
}

template<class T>
void searchMask2_1(int mask, int key, DSNode<T>* p, int i = 0)
{
	if (p->key & mask == key & mask) cout << p->key << " " << p->data << endl;
	if (digit(mask, i) == 0)
	{
		searchMask2_1(mask, key, p->Zero, i + 1);
		searchMask2_1(mask, key, p->One, i + 1);
	}
	else
		if(digit(key, i) == 1) searchMask2_1(mask, key, p->One, i + 1);
		else searchMask2_1(mask, key, p->Zero, i + 1);
}

template<class T>
void replace_1(DSNode<T>*& p)
{
	if (p == nullptr) return;
	if ((p->key - 5) mod 3 == 0) p->key = 10 - (p->key - 5) / 3;
	replace_1(p->Zero);
	replace_1(p->One);
}

template<class T>
void DELETE(DSNode<T>* p)
{
	if (p->One != nullptr)
	{
		DELETE(p->One);
		p->One = nullptr;
	}
	if (p->Zero != nullptr)
	{
		DELETE(p->Zero);
		p->Zero = nullptr;
	}
	delete p;
}

DSTree<int>* read(ifstream& st)
{
	int n;
	st >> n;
	DSNode<int>* tmp = new DSNode<int>(n, 0);
	DSTree<int>* A = new DSTree<int>(tmp);
	while (st >> n)
	{
		tmp = A->search(n);
		if (tmp != nullptr)	A->insert(n, 0);
		else tmp->data++;
	}
	return A;
}

template<class T>
DSNode<T>* create_1(DSNode<T>*& p, DSNode<T>*& pp, int a)
{
	if (p->Zero == nullptr && p->One == nullptr)
	{
		if (a == 0) pp->Zero = nullptr;
		else pp->One = nullptr;
		return p;
	}
	if (p->Zero != nullptr) return create_1(p->Zero, p, 0);
	else return create_1(p->One, p, 1);
}

template<class T>
DSTree<T>* create(DSTree<T>* A, DSTree<T>* B)
{
	if (A->root == nullptr && B->root == nullptr) return nullptr;
	if(A->root != nullptr) DSTree<T>* C = new DSTree<T>(A->root);
	else DSTree<T>* C = new DSTree<T>(B->root);
	DSNode<T>* tmp = nullptr;
	while (A->root != nullptr)
	{
		if (A->root->Zero != nullptr)
		{
			tmp = create_1(A->root->Zero, A->root, 0);
			if (C->search(tmp->key) == nullptr) C->insert(tmp->key, tmp->data);
			continue;
		}
		if (A->root->One != nullptr)
		{
			tmp = create_1(A->root->One, A->root, 1);
			if (C->search(tmp->key) == nullptr) C->insert(tmp->key, tmp->data);
			continue;
		}
		if (C->search(A->root->key) == nullptr) C->insert(A->root->key, A->root->data);
		tmp = A->root;
		A->root = nullptr;
		delete tmp;
	}
	DSNode<T>* tmp = nullptr;
	while (B->root != nullptr)
	{
		if (B->root->Zero != nullptr)
		{
			tmp = create_1(B->root->Zero, B->root, 0);
			if (C->search(tmp->key) == nullptr) C->insert(tmp->key, tmp->data);
			continue;
		}
		if (B->root->One != nullptr)
		{
			tmp = create_1(B->root->One, B->root, 1);
			if (C->search(tmp->key) == nullptr) C->insert(tmp->key, tmp->data);
			continue;
		}
		if (C->search(B->root->key) == nullptr) C->insert(B->root->key, B->root->data);
		tmp = B->root;
		B->root = nullptr;
		delete tmp;
	}
}

int main()
{
	string a;
	cin >> a;
	ifstream st(a + ".txt");
	DSTree<int>* A = read(st);
	A->print();

	system("pause");
	return 0;
}

#include <iostream>

using namespace std;

int digit(int x, int n)
{
	int a = (x >> n);
	return a & 1;
}

template<class T>
struct DSNode
{
	int key;
	T data;
	DSNode<T>* Zero;
	DSNode<T>* One;
	DSNode(int k, T d, DSNode<T>* z = nullptr, DSNode<T>* o = nullptr) : key(k), data(d), Zero(z), One(o) {}
};

template<class T>
struct DSTree
{
	DSNode<T>* root;

	DSTree(DSNode<T>* r) : root(r) {}

	void print() { print2(root); }
	DSNode<T>* search(int k) { return search1(k, root); }
	void insert(int k, T data) { if(search(k) == nullptr) insert1(k, data, root); }
	void del(int k) { del1(k, root); }

	~DSTree() { DELETE(root); }
};

template<class T>
void print1(DSNode<T>* r, int offset = 0)
{
	if (r == nullptr) return;
	print1(r->Zero, offset + 3);
	for (int i = 0; i < offset; i++) cout << " ";
	cout << r->key << " " << r->data << endl;
	print1(r->One, offset + 3);
}

template<class T>
DSNode<T>* search1(int k, DSNode<T>* p, int i = 0)
{
	if (p == nullptr) return nullptr;
	if (k == p->key) return p;
	if (digit(k, i) == 0) return search1(k, p->Zero, i + 1);
	else return search1(k, p->One, i + 1);
}

template<class T>
void insert1(int k, T data, DSNode<T>&* p, int i = 0)
{
	if (p->key == k) return;
	if (digit(k, i) == 0)
		if(p->Zero != nullptr) insert1(k, data, p->Zero, i + 1);
		else p->Zero = new DSNode<T>(k, data);
	else
		if(p->One != nullptr) insert1(k, data, p->One, i + 1);
		else p->One = new DSNode<T>(k, data);
}

template<class T>
void del2(DSNode<T>&* p)
{

}

template<class T>
void del1(int k, DSNode<T>&* p, int i = 0)
{
	if (p->key == k)
	{
		
		del2(p);
	}
	if (digit(k, i) == 0) del1(k, p->Zero, i + 1);
	else del1(k, p->One, i + 1);
}

template<class T>
void DELETE(DSNode<T>* p)
{
	if (p->One != nullptr)
	{
		DELETE(p->One);
		p->One = nullptr;
	}
	if (p->Zero != nullptr)
	{
		DELETE(p->Zero);
		p->Zero = nullptr;
	}
	delete p;
}

int main()
{
	
	system("pause");
	return 0;
}

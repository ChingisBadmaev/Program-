#include <iostream>
#include <queue>
using namespace std;
struct node{
  int data;
  node* left = NULL;
  node* right = NULL;
  int bal;
};
class bin_tree{
    node* root;
   public:
    bin_tree(int a){
      root = new node;
      root -> data = a;
      root -> left = NULL;
      root -> right = NULL;
      root -> bal = 0;
    }
    node* get_root(){
      return root;
    }
    int get_bal(node* n){
      return n -> bal;
    }
    void push(int a, node* n){
      if(n == NULL){
        node* tmp = new node;
        tmp -> data = a;
        tmp -> left = NULL;
        tmp -> right = NULL;
        tmp -> bal = 0;
        n = tmp;
        return;
      }
      if(n->left == NULL){
       node* tmp = new node;
       tmp -> data = a;
       tmp -> left = NULL;
       tmp -> right = NULL;
       tmp -> bal = 0;
       n -> left = tmp;
       n -> bal += 1;
       return;
      }
      if(n->right == NULL){
       node* tmp = new node;
       tmp -> data = a;
       tmp -> left = NULL;
       tmp -> right = NULL;
       tmp -> bal = 0;
       n -> right = tmp;
       n -> bal -= 1;
       return;
      }
     if(n->right->right != NULL){
       push(a, n->left);
       n -> bal += 1;
     }
     else{
      push(a, n->right);
      n -> bal -= 1;
     }
     return;
    }
    int pop(){
     if(root == NULL){
      cout << "ошибка";
      return 0;
     }
     node* tmp = root;
     int a;
     if(tmp->right == NULL){
      if(tmp->left == NULL){
       a = tmp->data;
       delete tmp;
       root = NULL;
       return a;
      }
      a = tmp->left->data;
      delete tmp->left;
      root->left = NULL;
      return a;
     }
     while(tmp->left->right != NULL){
      tmp = tmp->left;
     }
     if(tmp->left->left != NULL){
      a = tmp->left->left->data;
      delete tmp->left->left;
      tmp->left->left = NULL;
      return a;
     }
     if(tmp->right->right != NULL){
      a = tmp->right->right->data;
      delete tmp->right->right;
      tmp->right->right = NULL;
      return a;
     }
     if(tmp->right->left != NULL){
      a = tmp->right->left->data;
      delete tmp->right->left;
      tmp->right->left = NULL;
      return a;
     }
     if(tmp->right != NULL){
      a = tmp->right->data;
      delete tmp->right;
      tmp->right = NULL;
      return a;
     }
     a = tmp->left->data;
     delete tmp->left;
     tmp->left = NULL;
     return a;
    }
    bool balance(node* n){}
    bool find(){}
    void del_tree(node* n){
     if(n == NULL)
      return;
     del_tree(n->left);
     del_tree(n->right);
     delete n;
    }
    ~bin_tree(){
      del_tree(root);
    }
};
int main(){
 int a, b, c, d;
 cin >> a >> b >> c >> d;
 bin_tree obj1(a);
 obj1.push(b, obj1.get_root());
 obj1.push(c, obj1.get_root());
 obj1.push(d, obj1.get_root());
 cout << obj1.get_bal(obj1.get_root()) << endl;
 cout << obj1.pop() << endl;
 cout << obj1.pop() << endl;
 cout << obj1.pop() << endl;
 cout << obj1.pop() << endl;
 return 0;
}

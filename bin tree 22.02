#include <iostream>
#include <queue>
using namespace std;
struct node{
 	int data;
 	node* left = NULL;
 	node* right = NULL;
};
class bin_tree{
	node* root;
   public:
    bin_tree(int a){
    	root = new node;
    	root -> data = a;
    	root -> left = NULL;
    	root -> right = NULL;
    }
    void push(int a, node* n){
    	node* tmp = new node;
    	tmp -> data = a;
    	tmp -> left = NULL;
    	tmp -> right = NULL;
    	if(n == NULL){
    	  n = tmp;
    	  return;
    	}
    	if(n->left == NULL){
    	  n->left = tmp;
    	  return;
    	}
    	if(n->right == NULL){
    	  n->right = tmp;
    	  return;
    	}
    	if(n->right->left != NULL && n->right->right != NULL)
    	  push(a, n->left);
    	if(n->left->left != NULL && n->left->right != NULL)
          push(a, n->right);
        return;
    }
    int pop(){
    	node* temp = head;
    	int a = temp -> data;
    	head = head -> next;
    	delete temp;
    	return a;
    }
    bool DFS(int data, node* n){
    	if(n == NULL)
    	  return 0;
    	if(n->data == data)
    	  return 1;
    	if(DFS(data, n->left))
    	  return 1;
    	if(DFS(data, n->right))
    	  return 1;
    	return 0;
    }
    bool BFS(int data){
    	queue <node*> A;
    	A.push(root);
    	while(!A.isempty()){
    		node* tmp = A.pop();
    		if(tmp->data == data)
    		  return 1;
    		if(tmp->left != NULL)
    		  A.push(tmp->left);
    		if(tmp->right != NULL)
    		  A.push(tmp->right);
    	}
    	return 0;
    }
    void del_tree(node* n){
    	if(n == NULL)
    	  return;
    	del_tree(n->left);
    	del_tree(n->right);
    	delete n;
    }
    ~bin_tree(){
    	del_tree(root);
    	}
    }
};
int main(){
	int a;
    cin >> a;
    bin_tree obj1(a);
    obj1.push(a);
    cout << obj1.pop();
    return 0;
}

import math

#вычисление количества разрядников на секцию
def compute_num_arrester_section(section_length, span_length, arrester_on_tower):
    return section_length * 1000 / span_length * arrester_on_tower

#вычисление количества разрядников на линию
def compute_num_arrester_line(section_length, span_length, arrester_on_tower):
    num_arrester = 0.0
    for i in range(len(arrester_on_tower)):
        num_arrester += compute_num_arrester_section(section_length[i], span_length[i], arrester_on_tower[i])
    return num_arrester

#вычисление количества отключений для линии
def num_flashovers_on_line(section_length, num_flashovers, arrester_on_tower):
    N = 0.0
    for i in range(len(section_length)):
        N += section_length[i] / 100 * num_flashovers[i][arrester_on_tower[i]]
    return N

#Проверка оптимальности распределения
def check_optimality(section_length, span_length):
    num_arrester_line = compute_num_arrester_line(section_length, span_length, initial_arrester_on_tower)
    num_flashovers_line = num_flashovers_on_line(section_length, num_flashovers_all, initial_arrester_on_tower)
    N = 0.0
    for i in range(len(num_flashovers_all[0])):
        for j in range(len(num_flashovers_all[0])):
            for k in range(len(num_flashovers_all[0])):
                if (num_flashovers_on_line(section_length, num_flashovers_all, [i, j, k]) <= num_flashovers_line):
                    print(str(i) + ' ' + str(j) + ' ' + str(k))
                    print(num_flashovers_on_line(section_length, num_flashovers_all, [i, j, k]))
                    print(compute_num_arrester_line(section_length, span_length, [i, j, k]))

#входные данные
#длина пролетов секций(м)
span_length = [100, 400, 500]
#длина секций(км)
section_length = [10, 20, 30]
#количества отключений для секций на 100 км линии в год
num_flashovers_1 = [10, 7.5, 4.5, 2.3]
num_flashovers_2 = [6, 4, 1.5, 1]
num_flashovers_3 = [4, 2, 1.1, 0.1]
#общий список
num_flashovers_all = [num_flashovers_1, num_flashovers_2, num_flashovers_3]
#сколько разрядников на одной опоре каждой секции по алгоритму
initial_arrester_on_tower = [3, 3, 2]

#запуск
check_optimality(section_length, span_length)

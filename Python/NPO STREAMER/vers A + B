#Вычисление количества отключений на 100 км в год
#по алгоритмам А(стандарт IEEE) и B(LIOV-MC ideal groud)

import random
import math
import matplotlib.pyplot as plt
import numpy as np

#коэффициент корреляции
p = 0.47
#медиана по силе тока
cur_str_median = 33.3
#средне квадртичное отклонение по силе тока
cur_str_sigma = 0.605
#медиана по времени фронта
time_median = 3.83
#средне квадратичное отклонение по времени фронта
time_sigma = 0.553
#список I_p_n 
I_p_n = []
#список t_f_n
t_f_n = []
#список y_n 
y_n = []

def time_median1(I_p): #time_median*
    return math.log(time_median) + p * (time_sigma/cur_str_sigma) * (math.log(I_p_n[len(I_p_n) - 1]) - math.log(cur_str_median))

def time_sigma1(): #time_sigma*
    return math.log(time_sigma) * math.sqrt(1 - p**2) 

#Плотность логнормального распределения
def p_lognorm(value, median, sigma):
    a1 = 1/(math.sqrt(2 * math.pi) * value * sigma)
    a2 = math.exp(-(math.log(value) - math.log(median))**2/(2 * sigma**2)) 
    return a1 * a2

#Нахождение медианного значения
def mod_p(median, sigma):
       return math.exp(math.log(median) - sigma**2)

#Максимум плотности для тока молнии
def max_p_I():
    return p_lognorm(mod_p(cur_str_median, cur_str_sigma), cur_str_median, cur_str_sigma)

#Максимум плотности для времени фронта
def max_p_t(I_p):
    return p_lognorm(mod_p(time_median1(I_p), time_sigma1()), time_median1(I_p), time_sigma1())

#вычисление I_p_n
def compute_I_p_n():
    I_p = 1 + (200 - 1) * random.uniform(0, 1)
    Z = random.uniform(0, 1)
    while Z >= p_lognorm(I_p, cur_str_median, cur_str_sigma)/max_p_I():
        I_p = 1 + (200 - 1) * random.uniform(0, 1)
        Z = random.uniform(0, 1)
    I_p_n.append(I_p)

#вычисление t_f_n
def compute_t_f_n(I_p):
    t_f = 0.5 + (20 - 0.5) * random.uniform(0, 1)
    Z = random.uniform(0, 1)
    while Z >= p_lognorm(t_f, time_median1(I_p), time_sigma1())/max_p_t(I_p):
        t_f = 0.5 + (20 - 0.5) * random.uniform(0, 1)
        Z = random.uniform(0, 1)
    t_f_n.append(t_f)

#вычисление y_n
def compute_y_n(y_max):
    U_n = random.uniform(0, 1)
    y_n.append(U_n * y_max)

#вычисление y_min_i
def y_min_i(height, cur_str):
    r_s_i = 10 * cur_str**0.65
    r_g_i = 0.9 * r_s_i
    if(height >= r_g_i):
        return r_s_i
    else: 
        return math.sqrt(r_s_i**2 - (r_g_i - height)**2)

#вычисление y_max_i
def y_max_i(CFO, height, cur_str):
    return 30 * (cur_str * height)/(1.5 * CFO) * (1 + (0.4/math.sqrt(2)) * (1/math.sqrt(0.92)))

#создание молний
def create_lightn(N_tot, y_max):
    for i in range(N_tot):
        compute_I_p_n()
        compute_t_f_n(I_p_n[len(I_p_n) - 1])
        compute_y_n(y_max * 1000)

#проверка на перекрытия
def check_lightn(CFO, height):
    N = 0
    for i in range(len(I_p_n)):
        if(y_min_i(height, I_p_n[i]) < y_max_i(CFO, height, I_p_n[i])):
            if(y_n[i] <= y_max_i(CFO, height, I_p_n[i]) and y_n[i] >= y_min_i(height, I_p_n[i])):
                N += 1
    return N

#вычисление количства перекрытий на 100 км за год (B)
def num_of_insulation_flashovers_B(CFO, height, N_tot, y_max, N_g = 1):
    N = check_lightn(CFO, height)
    return 200 * N/N_tot * N_g * y_max

#вероятность, что ток молнии не меньше данного
def probability(current_strength):
    return 1/(1 + (current_strength/31)**2.6)

#вычисление количства перекрытий на 100 км за год (A)
def num_of_insulation_flashovers_A(CFO, height, N_g = 1):
    sum = 0.0
    for i in range(200):
        if(y_max_i(CFO, height, i) > y_min_i(height, i)):
            sum += (y_max_i(CFO, height, i) - y_min_i(height, i)) * (probability(i) - probability(i + 1))
    return 0.2 * sum * N_g

#Построение линий по алгоритму А
def create_line_A(height, color):
    A = []
    B = []
    for i in range(50, 325, 25):
        A.append(i)
        B.append(math.log(num_of_insulation_flashovers_A(i, height) + 0.0001))
    plt.plot(A, B, color = color, marker = 'o', linestyle = '--', markerfacecolor = color, label = str(height) + ' метров алг А')

#Построение линий по алгоритму B
def create_line_B(N_tot, height, y_max, color):
    A = []
    B = []
    for i in range(50, 325, 25):
        A.append(i)
        B.append(math.log(num_of_insulation_flashovers_B(i, height, N_tot, y_max) + 0.0001))
    plt.plot(A, B, color = color, marker = 'o', linestyle = '-', markerfacecolor = color, label = str(height) + ' метров алг В')

#вывод графика
def print_schedule(N_tot, y_max, height_A, height_B):
    create_lightn(N_tot, y_max)
    #Линии для height_B[i] алгоритм B
    for i in range(len(height_B)):
        create_line_B(N_tot, height_B[i], y_max, colors[i])
    #Линии для height_A[i] алгоритм A
    for i in range(len(height_A)):
        create_line_A(height_A[i], colors[i])
    #Оформление графика
    plt.xlabel('CFO (kV)', fontsize = 14)
    plt.ylabel('Flashovers/100km/yr', fontsize = 14)
    plt.title('Число отключений на 100 км в год', fontsize = 15)
    plt.grid()
    plt.ylim(-10, 6)
    plt.xlim(30, 330)
    for i in range(7):
        plt.text(35, math.log(10**(2 - i)), str(10**(2 - i)))
    plt.legend(loc = 'best')
    plt.show()

heightA = []
heightB = []
print('Введите количество молний: ')
lightn_N = int(input())
print('Введите количество линий для алгоритма А: ')
N_A = int(input())
for i in range(N_A):
    print('Введите высоту линии ' + str(i + 1) + ' для алгоритма А: ')
    heightA.append(int(input()))
print('Введите количество линий для алгоритма B: ')
N_B = int(input())
for i in range(N_B):
    print('Введите высоту линии ' + str(i + 1) + ' для алгоритма B: ')
    heightB.append(int(input()))

colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']
print_schedule(lightn_N, 0.6, heightA, heightB)

#алгоритм вычисления оптимальной последователности 
#постановки разрядниокв на опоры секций

#нахождения индекса максимума в двумерном списке
def find_max_index(list2):
    max = 0.0
    i1 = 0
    j1 = 0
    for i in range(len(list2)):
        for j in range(len(list2[i])):
            if (max < list2[i][j]):
                max = list2[i][j]
                i1 = i
                j1 = j
    return i1, j1

#нахождения максимума в двумерном списке
def find_max(list2):
    max = 0.0
    for i in range(len(list2)):
        for j in range(len(list2[i])):
            if (max < list2[i][j]):
                max = list2[i][j]
    return max

#вычисление количества разрядников на секцию
def compute_num_arrester_section(section_length, span_length, arrester_on_tower):
    return section_length * 1000 / span_length * arrester_on_tower

#Вывод относительной эффективности от количества разрядников
def print_efficiency(num_section, num_placement, relative_efficiency):
    print('Секция ' + str(num_section))
    if(num_placement != 0):
        num_arrester_DLS = num_placement
        num_arrester_IO = 0
    else:
        num_arrester_DLS = 0
        num_arrester_IO = 1
    print('Разрядников от ПУМ ' + str(num_arrester_DLS))
    print('Разрядников от ИП ' + str(num_arrester_IO))
    print('Относителная эффективность: ' + str(relative_efficiency))

#Высчитывание относительной эффективности для секции
def compute_efficiency(num_flashovers_DLS, num_flashovers_IO, span_length, section_length):
    efficiency = []
    initial_num_flashovers = (num_flashovers_DLS[0] + num_flashovers_IO[0]) * section_length / 100
    
    num_flashovers = (num_flashovers_DLS[0] + num_flashovers_IO[2]) * section_length / 100
    efficiency.append(initial_num_flashovers * 100 / (num_flashovers * 0.5))
    for i in range(3):
        num_flashovers = (num_flashovers_DLS[i + 1] + num_flashovers_IO[i + 1]) * section_length / 100
        efficiency.append(initial_num_flashovers * 100 / (num_flashovers * (i + 1)))
    return efficiency

#Функция оптимального выбора для постановки разрядников
def compute_optimal_choice(num_flashovers_DLS_all, num_flashovers_IO_all, span_length, section_length):
    efficiency_all = []
    for i in range(len(span_length)):
        efficiency = compute_efficiency(num_flashovers_DLS_all[i], num_flashovers_IO_all[i], span_length[i], section_length[i])
        efficiency_all.append(efficiency)
    while(find_max(efficiency_all) != 0):
        i1, j1 = find_max_index(efficiency_all)
        print_efficiency(i1 + 1, j1, efficiency_all[i1][j1])
        efficiency_all[i1][j1] = 0


#входные данные
#длины пролетов cекций(м)
span_length = [200, 300, 400]
#длина секций(км)
section_length = [10, 10, 10]
#количества отключений для секций на 100 км линии в год
#от прямых ударов молнии
num_flashovers_DLS_1 = [12, 8, 2, 1]
num_flashovers_DLS_2 = [8, 4, 1, 0.6]
num_flashovers_DLS_3 = [10, 5, 2, 0.5]
#от индуктированного перенапряжения
num_flashovers_IO_1 = [10, 2, 0.5, 0]
num_flashovers_IO_2 = [20, 5, 2, 0]
num_flashovers_IO_3 = [5, 1, 0.5, 0]
#общий список
num_flashovers_DLS_all = [num_flashovers_DLS_1, num_flashovers_DLS_2, num_flashovers_DLS_3]
num_flashovers_IO_all = [num_flashovers_IO_1, num_flashovers_IO_2, num_flashovers_IO_3]

#запуск 
compute_optimal_choice(num_flashovers_DLS_all, num_flashovers_IO_all, span_length, section_length)

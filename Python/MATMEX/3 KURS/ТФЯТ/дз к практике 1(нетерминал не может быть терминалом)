Out = []
Neterminal = []
Terminal = []
terminal_index = 51
Semantika = []
semantika_index = 101
Special_characters = [':', ';', ')', '(', '.', '*', ',', '#', '[', ']', ' ', '\n']

# Считывание и определение слов(t = 0, если терминал, и t = 1, если нетерминал)
def read_word(str1, index, t = 0):
    c = str1[index]
    index += 1
    while (str1[index] != ' '):
        if(str1[index] == "'"):
            index += 1
            continue
        if(ord(str1[index]) < 97 and ord(str1[index]) > 122):
            t = 1
        c += str1[index]
        index += 1
    if(str1[index + 1] == ':'):
        t = 1    
    return index, t, c

# Определение нетерминалов
def Neterminal_definition(str1):
    i = -1
    while (i < len(str1) - 9):
        i += 1
        if (Special_characters.count(str1[i]) != 0):
            continue
        if (str1[i] == '$'):
            i, t, c = read_word(str1, i + 1)
            continue
        if (str1[i] == "'"):
            i, t, c = read_word(str1, i + 1)
            continue
        i, t, c = read_word(str1, i)
        if (t == 1):
            Neterminal.append(c)
            t = 0

# Поиск индекса значения в списке
def find_index(list1, variable):
    for i in range(len(list1)):
        if(list1[i] == variable):
            return i
    return -1

def word_definition(str1, i, t = 0):
    c = str1[i]
    i += 1
    while(str1[i] != ' '):
        if(ord(str1[i]) < 97 or ord(str1[i]) > 122):
            t = 1
        c += str1[i]
        i += 1
    if(str1[i + 1] == ':'):
        t = 1
    if(t == 0 and Neterminal.count(c) == 0):
        if(Terminal.count(c) == 0):
            Terminal.append(c)
            global terminal_index
            Out.append(terminal_index)
            terminal_index += 1
        else:
            Out.append(find_index(Terminal, c) + 51)
    else:
        Out.append(find_index(Neterminal, c) + 11)
    return i

def swertka(str1):
    i = -1
    while (i < len(str1) - 9):
        i += 1
        c = str1[i]
        if(c == ' '):
            Out.append(' ')
            continue
        if(c == '\n'):
            Out.append('\n')
            continue
        if(c == ':'):
            Out.append(1)
            continue
        if(c == '('):
            Out.append(2)
            continue
        if(c == ')'):
            Out.append(3)
            continue
        if(c == '.'):
            Out.append(4)
            continue
        if(c == '*'):
            Out.append(5)
            continue
        if(c == ';'):
            Out.append(6)
            continue
        if(c == ','):
            Out.append(7)
            continue
        if(c == '#'):
            Out.append(8)
            continue
        if(c == '['):
            Out.append(9)
            continue
        if(c == ']'):
            Out.append(10)
            continue
        if(c == '$'):
            i += 1
            c = str1[i]
            i += 1
            while(str1[i] != ' '):
                c += str1[i]
                i += 1
            if(Semantika.count(c) == 0):
                Semantika.append(c)
                global semantika_index
                Out.append(semantika_index)
                semantika_index += 1
            else:
                Out.append(find_index(Semantika, c) + 101)
            continue
        if(c == "'"):
            i += 1
            c = str1[i]
            i += 1
            while(str1[i] != "'"):
                c += str1[i]
                i += 1
            if(Terminal.count(c) == 0):
                Terminal.append(c)
                global terminal_index
                Out.append(terminal_index)
                terminal_index += 1
            else:
                Out.append(find_index(Terminal, c) + 51)
            continue
        i = word_definition(str1, i)
    Out.append('\n')
    Out.append(1000)

# Чтение текстового представления грамматики
file = open(r'C:\Users\ershov.e\Desktop\file_read1.txt', 'r')
str2 = file.read()

# Запуск
Neterminal_definition(str2)
swertka(str2)

# Вывод лексем в числовом виде
i = 0
while (i < len(Out)):
    print_line = []
    c = ''
    while (Out[i] != '\n'):
        c += str(Out[i])
        if(str(Out[i]) != ' '):
            c += ' '
        i += 1
        if(i >= len(Out)):
            break
    print(c)
    i += 1

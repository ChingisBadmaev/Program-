import math

#функция
def f0(x):
	return 2**x - 2 * math.cos(x)

#1 производная
def f1(x):
	return 2**x * math.log(2) + 2 * math.sin(x)

#2 производная
def f2(x):
	return 2**x * (math.log(2))**2 + 2 * math.cos(x)

#0)ОТДЕЛЕНИЕ КОРНЕЙ
def metod0(A, B, N):
    print('Отделение корней')
    H = (B - A) / N
    X1 = A
    X2 = A + H
    count = 0
    for i in range(N):
        if(f0(X1) * f0(X2) <= 0):
            count += 1
            Ai.append(X1)
            Bi.append(X2)
        X1 += H
        X2 += H
    for i in range(len(Ai)):
        print('[' + str(Ai[i]) + ', ' + str(Bi[i]) + ']')
    print('Количество отрезков ' + str(count) + '\n')

#УТОЧНЕНИЕ КОРНЕЙ
#1)метод бисекции
def metod1(A, B):
	print('1)Метод бисекции')
	#список для хранения корней
	Xi = []
	#список для хранения длин отрезков
	delta_i = []
	#список для хранения количества шагов
	Ni = []
	for i in range(len(A)):
	  Ni.append(0)
	for i in range(len(A)):
		a = A[i]
		b = B[i]
		while(b - a > 2 * E):
			c = (a + b) / 2
			if(f0(a) * f0(c) <= 0):
				b = c
			else:
				a = c
			Ni[i] += 1
		Xi.append((a + b) / 2)
		delta_i.append((b - a) / 2)
	for i in range(len(A)):
		print('Начальное приближение ' + str(A[i]))
		print('Количество шагов ' + str(Ni[i]))
		print('Приближенное решение ' + str(Xi[i]))
		print('Длина отрезка ' + str(delta_i[i]))
		print('Абсолютная невязка ' + str(f0(Xi[i])) + '\n')

#2)метод Ньютона
def metod2(A, B):
	print('2)Метод Ньютона')
	#список для хранения корней
	Xi = []
	#два числа для вычислений
	a = 0.0
	b = 0.0
	#список для разницы двух последних приближений
	delta_i = []
	#список для хранения количества шагов
	Ni = []
	for i in range(len(A)):
	  Ni.append(0)
	for i in range(len(A)):
		a = A[i]
		b = a - f0(a)/f1(a)
		while(abs(b - a) >= E):
			a = b
			b = a - f0(a)/f1(a)
			Ni[i] += 1
		Xi.append(b)
		delta_i.append(abs(b - a))
	for i in range(len(A)):
		print('Начальное приближение ' + str(A[i]))
		print('Количество шагов ' + str(Ni[i]))
		print('Приближенное решение ' + str(Xi[i]))
		print('Модуль разности между двумя последними приближениями ' + str(delta_i[i]))
		print('Абсолютная невязка ' + str(f0(Xi[i])) + '\n')

#3)метод Ньютона модифицированный
def metod3(A, B):
	print('3)Метод Ньютона модифицированный')
	#список для хранения корней
	Xi = []
	#два числа для вычислений
	a = 0.0
	b = 0.0
	#список для разницы двух последних приближений
	delta_i = []
	#список для хранения количества шагов
	Ni = []
	for i in range(len(A)):
	  Ni.append(0)
	for i in range(len(A)):
		a = A[i]
		b = a - f0(a)/f1(A[i])
		while(abs(b - a) >= E):
			a = b
			b = a - f0(a)/f1(A[i])
			Ni[i] += 1
		Xi.append(b)
		delta_i.append(abs(b - a))
	for i in range(len(A)):
		print('Начальное приближение ' + str(A[i]))
		print('Количество шагов ' + str(Ni[i]))
		print('Приближенное решение ' + str(Xi[i]))
		print('Модуль разности между двумя последними приближениями ' + str(delta_i[i]))
		print('Абсолютная невязка ' + str(f0(Xi[i])) + '\n')

#4)метод секущих
def metod4(A, B):
	print('4)Метод секущих')
	#список для хранения корней
	Xi = []
	#три числа для вычислений
	a = 0.0
	b = 0.0
	c = 0.0
	#список для разницы двух последних приближений
	delta_i = []
	#список для хранения количества шагов
	Ni = []
	for i in range(len(A)):
	  Ni.append(0)
	for i in range(len(A)):
		a = A[i]
		b = B[i]
		c = b - f0(b)/(f0(b) - f0(a)) * (b - a) 
		while(abs(c - b) >= E):
			a = b
			b = c
			c = b - f0(b)/(f0(b) - f0(a)) * (b - a) 
			Ni[i] += 1
		Xi.append(c)
		delta_i.append(abs(c - b))
	for i in range(len(A)):
		print('Начальное приближение ' + str(A[i]))
		print('Количество шагов ' + str(Ni[i]))
		print('Приближенное решение ' + str(Xi[i]))
		print('Модуль разности между двумя последними приближениями ' + str(delta_i[i]))
		print('Абсолютная невязка ' + str(f0(Xi[i])) + '\n')

#задание начальных данных
A = -8.0
B = 10.0
#эпсилон
E = 0.000001
#количество отрезков в разбиении
N = 1000
#списки для хранения концов отрезков
Ai = []
Bi = []

print('Численные методы решения нелинейных уравнений вариант 3' + '\n')
print('Начальные данные')
print('Левая граница = ' + str(A))
print('Правая граница = ' + str(B))
print('Функция: 2**x - 2 * math.cos(x)')
print('Погрешность = ' + str(E)  + '\n')

#запуск
metod0(A, B, N)
metod1(Ai, Bi)
metod2(Ai, Bi)
metod3(Ai, Bi)
metod4(Ai, Bi)

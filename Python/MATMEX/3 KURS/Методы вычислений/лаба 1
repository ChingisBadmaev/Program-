import math

#функция
def f0(x):
	return 2**x - 2 * math.cos(x)

#1 производная
def f1(x):
	return 2**x * math.log(2) + 2 * math.sin(x)

#2 производная
def f2(x):
	return 2**x * (math.log(2))**2 + 2 * math.cos(x)

#0)ОТДЕЛЕНИЕ КОРНЕЙ
def metod0(A, B, N):
    print('Отделение корней')
    H = (B - A) / N
    X1 = A
    X2 = A + H
    count = 0
    for i in range(N):
        if(f0(X1) * f0(X2) <= 0):
            count += 1
            Ai.append(X1)
            Bi.append(X2)
        X1 += H
        X2 += H
    for i in range(len(Ai)):
        print('[' + str(Ai[i]) + ', ' + str(Bi[i]) + ']')
    print('Количество отрезков ' + str(count) + '\n')

#УТОЧНЕНИЕ КОРНЕЙ
#1)метод бисекции
def metod1(a, b):
	print('1)Метод бисекции')
	print('Начальное приближение ' + str(a))
	#Корень
	X = 0.0
	#Длина отрезка
	delta = 0.0
	#Количество шагов
	N = 0
	while(b - a > 2 * E):
		c = (a + b) / 2
		if(f0(a) * f0(c) <= 0):
			b = c
		else:
			a = c
		N += 1
	X = (a + b) / 2
	delta = (b - a) / 2
	print('Количество шагов ' + str(N))
	print('Приближенное решение ' + str(X))
	print('Длина отрезка ' + str(delta))
	print('Абсолютная невязка ' + str(f0(X)) + '\n')

#2)метод Ньютона
def metod2(a, b):
	print('2)Метод Ньютона')
	print('Начальное приближение ' + str((a + b)/2))
	#Корень
	X = 0.0
	#Длина отрезка
	delta = 0.0
	#Количество шагов
	N = 1
	if(f0((a + b)/2) == 0):
		N = 0
	a = (a + b)/2
	b = a - f0(a)/f1(a)
	while(abs(b - a) >= E):
		a = b
		b = a - f0(a)/f1(a)
		N += 1
	X = b
	delta = abs(b - a)
	print('Количество шагов ' + str(N))
	print('Приближенное решение ' + str(X))
	print('Модуль разности между двумя последними приближениями ' + str(delta))
	print('Абсолютная невязка ' + str(f0(X)) + '\n')

#3)метод Ньютона модифицированный
def metod3(a, b):
	print('3)Метод Ньютона модифицированный')
	print('Начальное приближение ' + str((a + b)/2))
	#Корень
	X = 0.0
	#Длина отрезка
	delta = 0.0
	#Количество шагов
	N = 1
	if(f0((a + b)/2) == 0):
		N = 0
	a1 = (a + b)/2
	a = (a + b)/2
	b = a - f0(a)/f1(a1)
	while(abs(b - a) >= E):
		a = b
		b = a - f0(a)/f1(a1)
		N += 1
	X = b
	delta = abs(b - a)
	print('Количество шагов ' + str(N))
	print('Приближенное решение ' + str(X))
	print('Модуль разности между двумя последними приближениями ' + str(delta))
	print('Абсолютная невязка ' + str(f0(X)) + '\n')

#4)метод секущих
def metod4(a, b):
	print('4)Метод секущих')
	print('Начальное приближение ' + str(a))
	#Корень
	X = 0.0
	#Длина отрезка
	delta = 0.0
	#Количество шагов
	N = 2
	if(f0(a) == 0):
		N = 0
		b = a
		c = a
	else:
		if(f0(b) == 0):
			N = 1
		c = b - f0(b)/(f0(b) - f0(a)) * (b - a) 
	while(abs(c - b) >= E):
		a = b
		b = c
		c = b - f0(b)/(f0(b) - f0(a)) * (b - a) 
		N += 1
	X = c
	delta = abs(c - b)
	print('Количество шагов ' + str(N))
	print('Приближенное решение ' + str(X))
	print('Модуль разности между двумя последними приближениями ' + str(delta))
	print('Абсолютная невязка ' + str(f0(X)) + '\n')

#задание начальных данных
A = -8.0
B = 10.0
#эпсилон
E = 0.000001
#количество отрезков в разбиении
N = 1000
#списки для хранения концов отрезков
Ai = []
Bi = []

print('Численные методы решения нелинейных уравнений вариант 3' + '\n')
print('Начальные данные')
print('Левая граница = ' + str(A))
print('Правая граница = ' + str(B))
print('Функция: 2**x - 2 * math.cos(x)')
print('Погрешность = ' + str(E)  + '\n')

#запуск
metod0(A, B, N)
for i in range(len(Ai)):
	print('Корень номер ' + str(i + 1))
	metod1(Ai[i], Bi[i])
	metod2(Ai[i], Bi[i])
	metod3(Ai[i], Bi[i])
	metod4(Ai[i], Bi[i])

import math
import sympy

# Функция
def fun(value):
    # return 4
    # return 3 * value + 4
    # return 6 * value ** 3 + 2 * value + 4
    return math.sin(value) + math.exp(value)

# Первообразная функции
def antiderivative(value):
    # return 4 * value
    # return 1.5 * value ** 2 + 4 * value
    # return 1.5 * value ** 4 + value ** 2 + 4 * value
    return -math.cos(value) + math.exp(value)

# Метод левых прямоугольников
def comp_int1(A, m, h):
    sum = 0
    for k in range(m):
        sum += h * fun(A + k * h)
    return sum

# Метод правых прямоугольников
def comp_int2(A, m, h):
    sum = 0
    for k in range(m):
        sum += h * fun(A + (k + 1) * h)
    return sum

# Метод средних прямоугольников
def comp_int3(A, m, h):
    sum = 0
    for k in range(m):
        sum += h * fun(A + (k + 0.5) * h)
    return sum

# Метод трапеций
def comp_int4(A, m, h):
    sum = 0
    for k in range(m):
        sum += 0.5 * h * (fun(A + k * h) + fun(A + (k + 1) * h))
    return sum

# Метод Симпсона
def comp_int5(A, m, h):
    sum = 0
    for k in range(m):
        sum += h * (fun(A + k * h) + 4 * fun(A + (k + 0.5) * h) + fun(A + (k + 1) * h)) / 6
    return sum

# Вычисление коэффициента M
def comp_M(A, d, m, h):
    x = sympy.Symbol('x')
    # f = 0 * x + 4
    # f = 3 * x + 4
    # f =  6 * x ** 3 + 2 * x + 4
    f = sympy.sin(x) + sympy.exp(x)
    for i in range(d + 1):
        f = f.diff(x)
    max = f.subs(x, A).evalf()
    for i in range(m):
        if(max < f.subs(x, A + i * h).evalf()):
            max = f.subs(x, A + i * h).evalf()
    return max

def main():
    print('Лабораторная номер 4')
    print('Приближённое вычисление интеграла по составным квадратурным формулам')
    print('Введите нижний предел A = ')
    A = int(input())
    print('Введите верхний предел B = ')
    B = int(input())
    print('Введите число разбиений m = ')
    m = int(input())
    h = (B - A) / m

    J = antiderivative(B) - antiderivative(A)
    print('A = ' + str(A))
    print('B = ' + str(B))
    print('m = ' + str(m))
    print('h = ' + str(h))
    print('f(x) = sin(x) + exp(x)')
    print('J = ' + str(J))

    print(str('\n') + 'Метод левых прямоугольников')
    print('J(h) = ' + str(comp_int1(A, m, h)))
    print('Абсолютная погрешность ' + str(abs(J - comp_int1(A, m, h))))
    print('Теоритическая погрешность ' + str(comp_M(A, 0, m, h) * (B - A) * h / 2))

    print(str('\n') + 'Метод правых прямоугольников')
    print('J(h) = ' + str(comp_int2(A, m, h)))
    print('Абсолютная погрешность ' + str(abs(J - comp_int2(A, m, h))))
    print('Теоритическая погрешность ' + str(comp_M(A, 0, m, h) * (B - A) * h / 2))

    print(str('\n') + 'Метод средних прямоугольников')
    print('J(h) = ' + str(comp_int3(A, m, h)))
    print('Абсолютная погрешность ' + str(abs(J - comp_int3(A, m, h))))
    print('Теоритическая погрешность ' + str(comp_M(A, 1, m, h) * (B - A) * h ** 2 / 24))

    print(str('\n') + 'Метод трапеций')
    print('J(h) = ' + str(comp_int4(A, m, h)))
    print('Абсолютная погрешность ' + str(abs(J - comp_int4(A, m, h))))
    print('Теоритическая погрешность ' + str(comp_M(A, 1, m, h) * (B - A) * h ** 2 / 12))

    print(str('\n') + 'Метод Симпсона')
    print('J(h) = ' + str(comp_int5(A, m, h)))
    print('Абсолютная погрешность ' + str(abs(J - comp_int5(A, m, h))))
    print('Теоритическая погрешность ' + str(comp_M(A, 3, m, h) * (B - A) * h ** 4 / 2880))

if __name__ == '__main__':
    main()

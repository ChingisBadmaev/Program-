#include <iostream> 
#include <cmath> 
#include <algorithm>
using namespace std;
const double s2 = sqrt(2);
void shortest_path(double** a, int n, int m){ 
 if (a[n][m] == 100 * s2)
  a[n][m] += a[n-1][m-1];
 else a[n][m] = min(a[n - 1][m], a[n][m - 1]) + 100;
} 
int main(){ 
 int N, M;
 int n;
 int p, q;
 cin >> N >> M >> n; 
 double** a = new double*[N + 1]; 
 for (int i = 0; i <= N; i++){
  a[i] = new double[M + 1];
  for (int j = 0; j <= M; j++)
  	a[i][j] = 0;
 }
 a[0][0] = 0; 
 for (int i = 1; i <= N; i++) 
  a[i][0] = a[i - 1][0] + 100;
 for (int i = 1; i <= M; i++) 
  a[0][i] = a[0][i - 1] + 100;
 for (int i = 0; i < n; i++){
  cin >> p >> q;
  a[p][q] = 100 * s2;
 }
 for (int i = 1; i <= N; i++)
  for (int l = 1; l <= M; l++) 
   shortest_path(a, i, l);
 cout << round(a[N][M]);
 return 0; 
}
